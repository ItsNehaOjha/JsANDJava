public class SLL {

    // references to head, tail and size to keep track of no nodes
    private Node head;   //private is a common practice for encapsulation.By 
                        //private you control how they are accessed and modified.
                        //This means that the internal representation of the 
                        //linked list is hidden from outside classes or code. 
    private Node tail;
    private int size;

    public SLL(){
        this.size = 0;  //Initializes a new singly linked list with size set to 0.
    }

    // Node Class: Represents a single node within the linked list storing a value and a next node link
    public class Node{
        private int value;
        private Node next;

        public Node(int val){
            //Jab aap sirf ek node create karna chahte hain aur aapko next node 
            //ki information nahi hoti tab aap is constructor ka use kar sakte hain.
        
            this.value= val;

        }

//Jab aap ek new node create karte hain jiska next node aapko pata hai (ya kisi 
//existing node ko link karna chahte hain), tab aap is constructor ka use karte hain

        public Node(int value, Node next){
            this.value=value;
            this.next= next;
        }
    }

    //insert value in linked list at first position
    public void insertAtFirst(int val){
        Node node = new Node(val);
        node.next =head;
        head= node;
        if(tail == null){
            tail = head;
        }
        size+=1;
        
    }

    //insert by recursion 

    

     // dislay by only given head
     public void display(){
        Node temp = head;
        while(temp!=null){
            System.out.print(temp.value + " -> ");
            temp = temp.next;
        }
        System.out.println("END");
    }

}
